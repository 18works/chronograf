package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/mrfusion/models"
)

/*PatchKapacitorsIDNoContent Kapacitor's configuration was changed

swagger:response patchKapacitorsIdNoContent
*/
type PatchKapacitorsIDNoContent struct {
}

// NewPatchKapacitorsIDNoContent creates PatchKapacitorsIDNoContent with default headers values
func NewPatchKapacitorsIDNoContent() *PatchKapacitorsIDNoContent {
	return &PatchKapacitorsIDNoContent{}
}

// WriteResponse to the client
func (o *PatchKapacitorsIDNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(204)
}

/*PatchKapacitorsIDNotFound Happens when trying to access a non-existent kapacitor.

swagger:response patchKapacitorsIdNotFound
*/
type PatchKapacitorsIDNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchKapacitorsIDNotFound creates PatchKapacitorsIDNotFound with default headers values
func NewPatchKapacitorsIDNotFound() *PatchKapacitorsIDNotFound {
	return &PatchKapacitorsIDNotFound{}
}

// WithPayload adds the payload to the patch kapacitors Id not found response
func (o *PatchKapacitorsIDNotFound) WithPayload(payload *models.Error) *PatchKapacitorsIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch kapacitors Id not found response
func (o *PatchKapacitorsIDNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchKapacitorsIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PatchKapacitorsIDDefault A processing or an unexpected error.

swagger:response patchKapacitorsIdDefault
*/
type PatchKapacitorsIDDefault struct {
	_statusCode int

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPatchKapacitorsIDDefault creates PatchKapacitorsIDDefault with default headers values
func NewPatchKapacitorsIDDefault(code int) *PatchKapacitorsIDDefault {
	if code <= 0 {
		code = 500
	}

	return &PatchKapacitorsIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the patch kapacitors ID default response
func (o *PatchKapacitorsIDDefault) WithStatusCode(code int) *PatchKapacitorsIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the patch kapacitors ID default response
func (o *PatchKapacitorsIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the patch kapacitors ID default response
func (o *PatchKapacitorsIDDefault) WithPayload(payload *models.Error) *PatchKapacitorsIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the patch kapacitors ID default response
func (o *PatchKapacitorsIDDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PatchKapacitorsIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
