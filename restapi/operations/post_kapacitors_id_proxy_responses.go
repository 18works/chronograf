package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/influxdata/mrfusion/models"
)

/*PostKapacitorsIDProxyNotFound Kapacitor ID does not exist.

swagger:response postKapacitorsIdProxyNotFound
*/
type PostKapacitorsIDProxyNotFound struct {

	// In: body
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostKapacitorsIDProxyNotFound creates PostKapacitorsIDProxyNotFound with default headers values
func NewPostKapacitorsIDProxyNotFound() *PostKapacitorsIDProxyNotFound {
	return &PostKapacitorsIDProxyNotFound{}
}

// WithPayload adds the payload to the post kapacitors Id proxy not found response
func (o *PostKapacitorsIDProxyNotFound) WithPayload(payload *models.Error) *PostKapacitorsIDProxyNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post kapacitors Id proxy not found response
func (o *PostKapacitorsIDProxyNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostKapacitorsIDProxyNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		if err := producer.Produce(rw, o.Payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*PostKapacitorsIDProxyDefault Response directly from kapacitor

swagger:response postKapacitorsIdProxyDefault
*/
type PostKapacitorsIDProxyDefault struct {
	_statusCode int

	// In: body
	Payload models.KapacitorProxyResponse `json:"body,omitempty"`
}

// NewPostKapacitorsIDProxyDefault creates PostKapacitorsIDProxyDefault with default headers values
func NewPostKapacitorsIDProxyDefault(code int) *PostKapacitorsIDProxyDefault {
	if code <= 0 {
		code = 500
	}

	return &PostKapacitorsIDProxyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the post kapacitors ID proxy default response
func (o *PostKapacitorsIDProxyDefault) WithStatusCode(code int) *PostKapacitorsIDProxyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the post kapacitors ID proxy default response
func (o *PostKapacitorsIDProxyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the post kapacitors ID proxy default response
func (o *PostKapacitorsIDProxyDefault) WithPayload(payload models.KapacitorProxyResponse) *PostKapacitorsIDProxyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post kapacitors ID proxy default response
func (o *PostKapacitorsIDProxyDefault) SetPayload(payload models.KapacitorProxyResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostKapacitorsIDProxyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if err := producer.Produce(rw, o.Payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}
