package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSourcesHandlerFunc turns a function with the right signature into a get sources handler
type GetSourcesHandlerFunc func(context.Context, GetSourcesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSourcesHandlerFunc) Handle(ctx context.Context, params GetSourcesParams) middleware.Responder {
	return fn(ctx, params)
}

// GetSourcesHandler interface for that can handle valid get sources params
type GetSourcesHandler interface {
	Handle(context.Context, GetSourcesParams) middleware.Responder
}

// NewGetSources creates a new http.Handler for the get sources operation
func NewGetSources(ctx *middleware.Context, handler GetSourcesHandler) *GetSources {
	return &GetSources{Context: ctx, Handler: handler}
}

/*GetSources swagger:route GET /sources getSources

Configured data sources

These data sources store time series data.

*/
type GetSources struct {
	Context *middleware.Context
	Handler GetSourcesHandler
}

func (o *GetSources) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetSourcesParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
