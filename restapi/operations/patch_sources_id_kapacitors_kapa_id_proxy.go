package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchSourcesIDKapacitorsKapaIDProxyHandlerFunc turns a function with the right signature into a patch sources ID kapacitors kapa ID proxy handler
type PatchSourcesIDKapacitorsKapaIDProxyHandlerFunc func(context.Context, PatchSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchSourcesIDKapacitorsKapaIDProxyHandlerFunc) Handle(ctx context.Context, params PatchSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder {
	return fn(ctx, params)
}

// PatchSourcesIDKapacitorsKapaIDProxyHandler interface for that can handle valid patch sources ID kapacitors kapa ID proxy params
type PatchSourcesIDKapacitorsKapaIDProxyHandler interface {
	Handle(context.Context, PatchSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder
}

// NewPatchSourcesIDKapacitorsKapaIDProxy creates a new http.Handler for the patch sources ID kapacitors kapa ID proxy operation
func NewPatchSourcesIDKapacitorsKapaIDProxy(ctx *middleware.Context, handler PatchSourcesIDKapacitorsKapaIDProxyHandler) *PatchSourcesIDKapacitorsKapaIDProxy {
	return &PatchSourcesIDKapacitorsKapaIDProxy{Context: ctx, Handler: handler}
}

/*PatchSourcesIDKapacitorsKapaIDProxy swagger:route PATCH /sources/{id}/kapacitors/{kapa_id}/proxy patchSourcesIdKapacitorsKapaIdProxy

PATCH body directly to configured kapacitor.  The response and status code from kapacitor is directly returned.

*/
type PatchSourcesIDKapacitorsKapaIDProxy struct {
	Context *middleware.Context
	Handler PatchSourcesIDKapacitorsKapaIDProxyHandler
}

func (o *PatchSourcesIDKapacitorsKapaIDProxy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPatchSourcesIDKapacitorsKapaIDProxyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
