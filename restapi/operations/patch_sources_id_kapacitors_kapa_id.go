package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchSourcesIDKapacitorsKapaIDHandlerFunc turns a function with the right signature into a patch sources ID kapacitors kapa ID handler
type PatchSourcesIDKapacitorsKapaIDHandlerFunc func(context.Context, PatchSourcesIDKapacitorsKapaIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchSourcesIDKapacitorsKapaIDHandlerFunc) Handle(ctx context.Context, params PatchSourcesIDKapacitorsKapaIDParams) middleware.Responder {
	return fn(ctx, params)
}

// PatchSourcesIDKapacitorsKapaIDHandler interface for that can handle valid patch sources ID kapacitors kapa ID params
type PatchSourcesIDKapacitorsKapaIDHandler interface {
	Handle(context.Context, PatchSourcesIDKapacitorsKapaIDParams) middleware.Responder
}

// NewPatchSourcesIDKapacitorsKapaID creates a new http.Handler for the patch sources ID kapacitors kapa ID operation
func NewPatchSourcesIDKapacitorsKapaID(ctx *middleware.Context, handler PatchSourcesIDKapacitorsKapaIDHandler) *PatchSourcesIDKapacitorsKapaID {
	return &PatchSourcesIDKapacitorsKapaID{Context: ctx, Handler: handler}
}

/*PatchSourcesIDKapacitorsKapaID swagger:route PATCH /sources/{id}/kapacitors/{kapa_id} patchSourcesIdKapacitorsKapaId

Update kapacitor configuration

*/
type PatchSourcesIDKapacitorsKapaID struct {
	Context *middleware.Context
	Handler PatchSourcesIDKapacitorsKapaIDHandler
}

func (o *PatchSourcesIDKapacitorsKapaID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPatchSourcesIDKapacitorsKapaIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
