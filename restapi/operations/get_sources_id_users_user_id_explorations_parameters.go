package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSourcesIDUsersUserIDExplorationsParams creates a new GetSourcesIDUsersUserIDExplorationsParams object
// with the default values initialized.
func NewGetSourcesIDUsersUserIDExplorationsParams() GetSourcesIDUsersUserIDExplorationsParams {
	var ()
	return GetSourcesIDUsersUserIDExplorationsParams{}
}

// GetSourcesIDUsersUserIDExplorationsParams contains all the bound params for the get sources ID users user ID explorations operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSourcesIDUsersUserIDExplorations
type GetSourcesIDUsersUserIDExplorationsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*ID of the data source
	  Required: true
	  In: path
	*/
	ID string
	/*All Data Explorations returned only for this user.
	  Required: true
	  In: path
	*/
	UserID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetSourcesIDUsersUserIDExplorationsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	rID, rhkID, _ := route.Params.GetOK("id")
	if err := o.bindID(rID, rhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	rUserID, rhkUserID, _ := route.Params.GetOK("user_id")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSourcesIDUsersUserIDExplorationsParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.ID = raw

	return nil
}

func (o *GetSourcesIDUsersUserIDExplorationsParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.UserID = raw

	return nil
}
