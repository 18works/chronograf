package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSourcesIDKapacitorsKapaIDProxyHandlerFunc turns a function with the right signature into a get sources ID kapacitors kapa ID proxy handler
type GetSourcesIDKapacitorsKapaIDProxyHandlerFunc func(context.Context, GetSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSourcesIDKapacitorsKapaIDProxyHandlerFunc) Handle(ctx context.Context, params GetSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder {
	return fn(ctx, params)
}

// GetSourcesIDKapacitorsKapaIDProxyHandler interface for that can handle valid get sources ID kapacitors kapa ID proxy params
type GetSourcesIDKapacitorsKapaIDProxyHandler interface {
	Handle(context.Context, GetSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder
}

// NewGetSourcesIDKapacitorsKapaIDProxy creates a new http.Handler for the get sources ID kapacitors kapa ID proxy operation
func NewGetSourcesIDKapacitorsKapaIDProxy(ctx *middleware.Context, handler GetSourcesIDKapacitorsKapaIDProxyHandler) *GetSourcesIDKapacitorsKapaIDProxy {
	return &GetSourcesIDKapacitorsKapaIDProxy{Context: ctx, Handler: handler}
}

/*GetSourcesIDKapacitorsKapaIDProxy swagger:route GET /sources/{id}/kapacitors/{kapa_id}/proxy getSourcesIdKapacitorsKapaIdProxy

GET to `path` of kapacitor.  The response and status code from kapacitor is directly returned.

*/
type GetSourcesIDKapacitorsKapaIDProxy struct {
	Context *middleware.Context
	Handler GetSourcesIDKapacitorsKapaIDProxyHandler
}

func (o *GetSourcesIDKapacitorsKapaIDProxy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetSourcesIDKapacitorsKapaIDProxyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
