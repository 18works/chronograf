package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteSourcesIDKapacitorsKapaIDProxyHandlerFunc turns a function with the right signature into a delete sources ID kapacitors kapa ID proxy handler
type DeleteSourcesIDKapacitorsKapaIDProxyHandlerFunc func(context.Context, DeleteSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSourcesIDKapacitorsKapaIDProxyHandlerFunc) Handle(ctx context.Context, params DeleteSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder {
	return fn(ctx, params)
}

// DeleteSourcesIDKapacitorsKapaIDProxyHandler interface for that can handle valid delete sources ID kapacitors kapa ID proxy params
type DeleteSourcesIDKapacitorsKapaIDProxyHandler interface {
	Handle(context.Context, DeleteSourcesIDKapacitorsKapaIDProxyParams) middleware.Responder
}

// NewDeleteSourcesIDKapacitorsKapaIDProxy creates a new http.Handler for the delete sources ID kapacitors kapa ID proxy operation
func NewDeleteSourcesIDKapacitorsKapaIDProxy(ctx *middleware.Context, handler DeleteSourcesIDKapacitorsKapaIDProxyHandler) *DeleteSourcesIDKapacitorsKapaIDProxy {
	return &DeleteSourcesIDKapacitorsKapaIDProxy{Context: ctx, Handler: handler}
}

/*DeleteSourcesIDKapacitorsKapaIDProxy swagger:route DELETE /sources/{id}/kapacitors/{kapa_id}/proxy deleteSourcesIdKapacitorsKapaIdProxy

DELETE to `path` of kapacitor.  The response and status code from kapacitor is directly returned.

*/
type DeleteSourcesIDKapacitorsKapaIDProxy struct {
	Context *middleware.Context
	Handler DeleteSourcesIDKapacitorsKapaIDProxyHandler
}

func (o *DeleteSourcesIDKapacitorsKapaIDProxy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteSourcesIDKapacitorsKapaIDProxyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
