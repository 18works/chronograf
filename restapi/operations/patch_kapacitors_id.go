package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	context "golang.org/x/net/context"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PatchKapacitorsIDHandlerFunc turns a function with the right signature into a patch kapacitors ID handler
type PatchKapacitorsIDHandlerFunc func(context.Context, PatchKapacitorsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchKapacitorsIDHandlerFunc) Handle(ctx context.Context, params PatchKapacitorsIDParams) middleware.Responder {
	return fn(ctx, params)
}

// PatchKapacitorsIDHandler interface for that can handle valid patch kapacitors ID params
type PatchKapacitorsIDHandler interface {
	Handle(context.Context, PatchKapacitorsIDParams) middleware.Responder
}

// NewPatchKapacitorsID creates a new http.Handler for the patch kapacitors ID operation
func NewPatchKapacitorsID(ctx *middleware.Context, handler PatchKapacitorsIDHandler) *PatchKapacitorsID {
	return &PatchKapacitorsID{Context: ctx, Handler: handler}
}

/*PatchKapacitorsID swagger:route PATCH /kapacitors/{id} patchKapacitorsId

Update kapacitor configuration

*/
type PatchKapacitorsID struct {
	Context *middleware.Context
	Handler PatchKapacitorsIDHandler
}

func (o *PatchKapacitorsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewPatchKapacitorsIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(context.Background(), Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
