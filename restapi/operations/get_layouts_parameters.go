package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetLayoutsParams creates a new GetLayoutsParams object
// with the default values initialized.
func NewGetLayoutsParams() GetLayoutsParams {
	var ()
	return GetLayoutsParams{}
}

// GetLayoutsParams contains all the bound params for the get layouts operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetLayouts
type GetLayoutsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Returns layouts with this app
	  In: query
	  Collection Format: csv
	*/
	Apps []string
	/*Returns layouts with this telegraf measurement
	  In: query
	  Collection Format: csv
	*/
	TelegrafMeasurements []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetLayoutsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qApps, qhkApps, _ := qs.GetOK("apps")
	if err := o.bindApps(qApps, qhkApps, route.Formats); err != nil {
		res = append(res, err)
	}

	qTelegrafMeasurements, qhkTelegrafMeasurements, _ := qs.GetOK("telegraf_measurements")
	if err := o.bindTelegrafMeasurements(qTelegrafMeasurements, qhkTelegrafMeasurements, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetLayoutsParams) bindApps(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvApps string
	if len(rawData) > 0 {
		qvApps = rawData[len(rawData)-1]
	}

	raw := swag.SplitByFormat(qvApps, "csv")
	size := len(raw)

	if size == 0 {
		return nil
	}

	ic := raw
	isz := size
	var ir []string
	iValidateElement := func(i int, appsI string) *errors.Validation {

		return nil
	}

	for i := 0; i < isz; i++ {

		if err := iValidateElement(i, ic[i]); err != nil {
			return err
		}
		ir = append(ir, ic[i])
	}

	o.Apps = ir

	return nil
}

func (o *GetLayoutsParams) bindTelegrafMeasurements(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvTelegrafMeasurements string
	if len(rawData) > 0 {
		qvTelegrafMeasurements = rawData[len(rawData)-1]
	}

	raw := swag.SplitByFormat(qvTelegrafMeasurements, "csv")
	size := len(raw)

	if size == 0 {
		return nil
	}

	ic := raw
	isz := size
	var ir []string
	iValidateElement := func(i int, telegrafMeasurementsI string) *errors.Validation {

		return nil
	}

	for i := 0; i < isz; i++ {

		if err := iValidateElement(i, ic[i]); err != nil {
			return err
		}
		ir = append(ir, ic[i])
	}

	o.TelegrafMeasurements = ir

	return nil
}
