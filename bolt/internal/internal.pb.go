// Code generated by protoc-gen-gogo.
// source: internal.proto
// DO NOT EDIT!

/*
Package internal is a generated protocol buffer package.

It is generated from these files:
	internal.proto

It has these top-level messages:
	Source
	Dashboard
	DashboardCell
	Axis
	Template
	TemplateValue
	TemplateQuery
	Server
	Layout
	Cell
	Query
	Range
	AlertRule
	User
*/
package internal

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Source struct {
	ID                 int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Type               string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
	Username           string `protobuf:"bytes,4,opt,name=Username,proto3" json:"Username,omitempty"`
	Password           string `protobuf:"bytes,5,opt,name=Password,proto3" json:"Password,omitempty"`
	URL                string `protobuf:"bytes,6,opt,name=URL,proto3" json:"URL,omitempty"`
	Default            bool   `protobuf:"varint,7,opt,name=Default,proto3" json:"Default,omitempty"`
	Telegraf           string `protobuf:"bytes,8,opt,name=Telegraf,proto3" json:"Telegraf,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,9,opt,name=InsecureSkipVerify,proto3" json:"InsecureSkipVerify,omitempty"`
	MetaURL            string `protobuf:"bytes,10,opt,name=MetaURL,proto3" json:"MetaURL,omitempty"`
	SharedSecret       string `protobuf:"bytes,11,opt,name=SharedSecret,proto3" json:"SharedSecret,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{0} }

type Dashboard struct {
	ID        int64            `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Cells     []*DashboardCell `protobuf:"bytes,3,rep,name=cells" json:"cells,omitempty"`
	Templates []*Template      `protobuf:"bytes,4,rep,name=templates" json:"templates,omitempty"`
}

func (m *Dashboard) Reset()                    { *m = Dashboard{} }
func (m *Dashboard) String() string            { return proto.CompactTextString(m) }
func (*Dashboard) ProtoMessage()               {}
func (*Dashboard) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{1} }

func (m *Dashboard) GetCells() []*DashboardCell {
	if m != nil {
		return m.Cells
	}
	return nil
}

func (m *Dashboard) GetTemplates() []*Template {
	if m != nil {
		return m.Templates
	}
	return nil
}

type DashboardCell struct {
	X       int32            `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       int32            `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W       int32            `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H       int32            `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
	Queries []*Query         `protobuf:"bytes,5,rep,name=queries" json:"queries,omitempty"`
	Name    string           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Type    string           `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	ID      string           `protobuf:"bytes,8,opt,name=ID,proto3" json:"ID,omitempty"`
	Axes    map[string]*Axis `protobuf:"bytes,9,rep,name=axes" json:"axes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DashboardCell) Reset()                    { *m = DashboardCell{} }
func (m *DashboardCell) String() string            { return proto.CompactTextString(m) }
func (*DashboardCell) ProtoMessage()               {}
func (*DashboardCell) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{2} }

func (m *DashboardCell) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *DashboardCell) GetAxes() map[string]*Axis {
	if m != nil {
		return m.Axes
	}
	return nil
}

type Axis struct {
	LegacyBounds []int64  `protobuf:"varint,1,rep,name=legacyBounds" json:"legacyBounds,omitempty"`
	Bounds       []string `protobuf:"bytes,2,rep,name=bounds" json:"bounds,omitempty"`
	Label        string   `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Prefix       string   `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix       string   `protobuf:"bytes,5,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Base         string   `protobuf:"bytes,6,opt,name=base,proto3" json:"base,omitempty"`
	Scale        string   `protobuf:"bytes,7,opt,name=scale,proto3" json:"scale,omitempty"`
}

func (m *Axis) Reset()                    { *m = Axis{} }
func (m *Axis) String() string            { return proto.CompactTextString(m) }
func (*Axis) ProtoMessage()               {}
func (*Axis) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{3} }

type Template struct {
	ID      string           `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TempVar string           `protobuf:"bytes,2,opt,name=temp_var,json=tempVar,proto3" json:"temp_var,omitempty"`
	Values  []*TemplateValue `protobuf:"bytes,3,rep,name=values" json:"values,omitempty"`
	Type    string           `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	Label   string           `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	Query   *TemplateQuery   `protobuf:"bytes,6,opt,name=query" json:"query,omitempty"`
}

func (m *Template) Reset()                    { *m = Template{} }
func (m *Template) String() string            { return proto.CompactTextString(m) }
func (*Template) ProtoMessage()               {}
func (*Template) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{4} }

func (m *Template) GetValues() []*TemplateValue {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *Template) GetQuery() *TemplateQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

type TemplateValue struct {
	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Selected bool   `protobuf:"varint,3,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (m *TemplateValue) Reset()                    { *m = TemplateValue{} }
func (m *TemplateValue) String() string            { return proto.CompactTextString(m) }
func (*TemplateValue) ProtoMessage()               {}
func (*TemplateValue) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{5} }

type TemplateQuery struct {
	Command     string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Db          string `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
	Rp          string `protobuf:"bytes,3,opt,name=rp,proto3" json:"rp,omitempty"`
	Measurement string `protobuf:"bytes,4,opt,name=measurement,proto3" json:"measurement,omitempty"`
	TagKey      string `protobuf:"bytes,5,opt,name=tag_key,json=tagKey,proto3" json:"tag_key,omitempty"`
	FieldKey    string `protobuf:"bytes,6,opt,name=field_key,json=fieldKey,proto3" json:"field_key,omitempty"`
}

func (m *TemplateQuery) Reset()                    { *m = TemplateQuery{} }
func (m *TemplateQuery) String() string            { return proto.CompactTextString(m) }
func (*TemplateQuery) ProtoMessage()               {}
func (*TemplateQuery) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{6} }

type Server struct {
	ID       int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=Username,proto3" json:"Username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=Password,proto3" json:"Password,omitempty"`
	URL      string `protobuf:"bytes,5,opt,name=URL,proto3" json:"URL,omitempty"`
	SrcID    int64  `protobuf:"varint,6,opt,name=SrcID,proto3" json:"SrcID,omitempty"`
	Active   bool   `protobuf:"varint,7,opt,name=Active,proto3" json:"Active,omitempty"`
}

func (m *Server) Reset()                    { *m = Server{} }
func (m *Server) String() string            { return proto.CompactTextString(m) }
func (*Server) ProtoMessage()               {}
func (*Server) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{7} }

type Layout struct {
	ID          string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Application string  `protobuf:"bytes,2,opt,name=Application,proto3" json:"Application,omitempty"`
	Measurement string  `protobuf:"bytes,3,opt,name=Measurement,proto3" json:"Measurement,omitempty"`
	Cells       []*Cell `protobuf:"bytes,4,rep,name=Cells" json:"Cells,omitempty"`
	Autoflow    bool    `protobuf:"varint,5,opt,name=Autoflow,proto3" json:"Autoflow,omitempty"`
}

func (m *Layout) Reset()                    { *m = Layout{} }
func (m *Layout) String() string            { return proto.CompactTextString(m) }
func (*Layout) ProtoMessage()               {}
func (*Layout) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{8} }

func (m *Layout) GetCells() []*Cell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type Cell struct {
	X       int32            `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y       int32            `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	W       int32            `protobuf:"varint,3,opt,name=w,proto3" json:"w,omitempty"`
	H       int32            `protobuf:"varint,4,opt,name=h,proto3" json:"h,omitempty"`
	Queries []*Query         `protobuf:"bytes,5,rep,name=queries" json:"queries,omitempty"`
	I       string           `protobuf:"bytes,6,opt,name=i,proto3" json:"i,omitempty"`
	Name    string           `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Yranges []int64          `protobuf:"varint,8,rep,name=yranges" json:"yranges,omitempty"`
	Ylabels []string         `protobuf:"bytes,9,rep,name=ylabels" json:"ylabels,omitempty"`
	Type    string           `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Axes    map[string]*Axis `protobuf:"bytes,11,rep,name=axes" json:"axes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Cell) Reset()                    { *m = Cell{} }
func (m *Cell) String() string            { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()               {}
func (*Cell) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{9} }

func (m *Cell) GetQueries() []*Query {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *Cell) GetAxes() map[string]*Axis {
	if m != nil {
		return m.Axes
	}
	return nil
}

type Query struct {
	Command  string   `protobuf:"bytes,1,opt,name=Command,proto3" json:"Command,omitempty"`
	DB       string   `protobuf:"bytes,2,opt,name=DB,proto3" json:"DB,omitempty"`
	RP       string   `protobuf:"bytes,3,opt,name=RP,proto3" json:"RP,omitempty"`
	GroupBys []string `protobuf:"bytes,4,rep,name=GroupBys" json:"GroupBys,omitempty"`
	Wheres   []string `protobuf:"bytes,5,rep,name=Wheres" json:"Wheres,omitempty"`
	Label    string   `protobuf:"bytes,6,opt,name=Label,proto3" json:"Label,omitempty"`
	Range    *Range   `protobuf:"bytes,7,opt,name=Range" json:"Range,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{10} }

func (m *Query) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

type Range struct {
	Upper int64 `protobuf:"varint,1,opt,name=Upper,proto3" json:"Upper,omitempty"`
	Lower int64 `protobuf:"varint,2,opt,name=Lower,proto3" json:"Lower,omitempty"`
}

func (m *Range) Reset()                    { *m = Range{} }
func (m *Range) String() string            { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()               {}
func (*Range) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{11} }

type AlertRule struct {
	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	JSON   string `protobuf:"bytes,2,opt,name=JSON,proto3" json:"JSON,omitempty"`
	SrcID  int64  `protobuf:"varint,3,opt,name=SrcID,proto3" json:"SrcID,omitempty"`
	KapaID int64  `protobuf:"varint,4,opt,name=KapaID,proto3" json:"KapaID,omitempty"`
}

func (m *AlertRule) Reset()                    { *m = AlertRule{} }
func (m *AlertRule) String() string            { return proto.CompactTextString(m) }
func (*AlertRule) ProtoMessage()               {}
func (*AlertRule) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{12} }

type User struct {
	ID           uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Username     string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
	Organization string `protobuf:"bytes,3,opt,name=Organization,proto3" json:"Organization,omitempty"`
	Provider     string `protobuf:"bytes,4,opt,name=Provider,proto3" json:"Provider,omitempty"`
	Scheme       string `protobuf:"bytes,5,opt,name=Scheme,proto3" json:"Scheme,omitempty"`
	CreatedAt    int64  `protobuf:"varint,6,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    int64  `protobuf:"varint,7,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptorInternal, []int{13} }

func init() {
	proto.RegisterType((*Source)(nil), "internal.Source")
	proto.RegisterType((*Dashboard)(nil), "internal.Dashboard")
	proto.RegisterType((*DashboardCell)(nil), "internal.DashboardCell")
	proto.RegisterType((*Axis)(nil), "internal.Axis")
	proto.RegisterType((*Template)(nil), "internal.Template")
	proto.RegisterType((*TemplateValue)(nil), "internal.TemplateValue")
	proto.RegisterType((*TemplateQuery)(nil), "internal.TemplateQuery")
	proto.RegisterType((*Server)(nil), "internal.Server")
	proto.RegisterType((*Layout)(nil), "internal.Layout")
	proto.RegisterType((*Cell)(nil), "internal.Cell")
	proto.RegisterType((*Query)(nil), "internal.Query")
	proto.RegisterType((*Range)(nil), "internal.Range")
	proto.RegisterType((*AlertRule)(nil), "internal.AlertRule")
	proto.RegisterType((*User)(nil), "internal.User")
}

func init() { proto.RegisterFile("internal.proto", fileDescriptorInternal) }

var fileDescriptorInternal = []byte{
	// 1080 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x8f, 0xdb, 0x44,
	0x14, 0x97, 0xff, 0x25, 0xf1, 0xcb, 0xb6, 0xa0, 0x51, 0x45, 0x4d, 0xe1, 0x10, 0x2c, 0x90, 0x82,
	0x44, 0x17, 0xd4, 0x0a, 0x09, 0x71, 0xcb, 0x6e, 0x50, 0xb5, 0xec, 0xb6, 0x5d, 0x26, 0xbb, 0xcb,
	0x09, 0x55, 0x13, 0xfb, 0x25, 0xb1, 0xea, 0xc4, 0x66, 0x6c, 0xef, 0xc6, 0x7c, 0x0a, 0x3e, 0x01,
	0x12, 0x12, 0x27, 0x0e, 0x1c, 0xf8, 0x02, 0xdc, 0x38, 0xf0, 0xa9, 0xd0, 0x9b, 0x19, 0x3b, 0x4e,
	0xbb, 0xa0, 0x5e, 0xe0, 0x36, 0xbf, 0xdf, 0x1b, 0xbf, 0x99, 0x79, 0xef, 0xfd, 0x7e, 0x32, 0xdc,
	0x4d, 0x36, 0x25, 0xca, 0x8d, 0x48, 0x0f, 0x73, 0x99, 0x95, 0x19, 0x1b, 0x34, 0x38, 0xfc, 0xcd,
	0x86, 0xde, 0x2c, 0xab, 0x64, 0x84, 0xec, 0x2e, 0xd8, 0x27, 0xd3, 0xc0, 0x1a, 0x59, 0x63, 0x87,
	0xdb, 0x27, 0x53, 0xc6, 0xc0, 0x7d, 0x26, 0xd6, 0x18, 0xd8, 0x23, 0x6b, 0xec, 0x73, 0xb5, 0x26,
	0xee, 0xa2, 0xce, 0x31, 0x70, 0x34, 0x47, 0x6b, 0xf6, 0x00, 0x06, 0x97, 0x05, 0x65, 0x5b, 0x63,
	0xe0, 0x2a, 0xbe, 0xc5, 0x14, 0x3b, 0x17, 0x45, 0x71, 0x93, 0xc9, 0x38, 0xf0, 0x74, 0xac, 0xc1,
	0xec, 0x6d, 0x70, 0x2e, 0xf9, 0x59, 0xd0, 0x53, 0x34, 0x2d, 0x59, 0x00, 0xfd, 0x29, 0x2e, 0x44,
	0x95, 0x96, 0x41, 0x7f, 0x64, 0x8d, 0x07, 0xbc, 0x81, 0x94, 0xe7, 0x02, 0x53, 0x5c, 0x4a, 0xb1,
	0x08, 0x06, 0x3a, 0x4f, 0x83, 0xd9, 0x21, 0xb0, 0x93, 0x4d, 0x81, 0x51, 0x25, 0x71, 0xf6, 0x32,
	0xc9, 0xaf, 0x50, 0x26, 0x8b, 0x3a, 0xf0, 0x55, 0x82, 0x5b, 0x22, 0x74, 0xca, 0x53, 0x2c, 0x05,
	0x9d, 0x0d, 0x2a, 0x55, 0x03, 0x59, 0x08, 0x07, 0xb3, 0x95, 0x90, 0x18, 0xcf, 0x30, 0x92, 0x58,
	0x06, 0x43, 0x15, 0xde, 0xe3, 0xc2, 0x1f, 0x2d, 0xf0, 0xa7, 0xa2, 0x58, 0xcd, 0x33, 0x21, 0xe3,
	0x37, 0xaa, 0xd9, 0x43, 0xf0, 0x22, 0x4c, 0xd3, 0x22, 0x70, 0x46, 0xce, 0x78, 0xf8, 0xe8, 0xfe,
	0x61, 0xdb, 0x8c, 0x36, 0xcf, 0x31, 0xa6, 0x29, 0xd7, 0xbb, 0xd8, 0x67, 0xe0, 0x97, 0xb8, 0xce,
	0x53, 0x51, 0x62, 0x11, 0xb8, 0xea, 0x13, 0xb6, 0xfb, 0xe4, 0xc2, 0x84, 0xf8, 0x6e, 0x53, 0xf8,
	0xab, 0x0d, 0x77, 0xf6, 0x52, 0xb1, 0x03, 0xb0, 0xb6, 0xea, 0x56, 0x1e, 0xb7, 0xb6, 0x84, 0x6a,
	0x75, 0x23, 0x8f, 0x5b, 0x35, 0xa1, 0x1b, 0xd5, 0x3f, 0x8f, 0x5b, 0x37, 0x84, 0x56, 0xaa, 0x6b,
	0x1e, 0xb7, 0x56, 0xec, 0x63, 0xe8, 0x7f, 0x5f, 0xa1, 0x4c, 0xb0, 0x08, 0x3c, 0x75, 0xf2, 0x5b,
	0xbb, 0x93, 0xbf, 0xa9, 0x50, 0xd6, 0xbc, 0x89, 0xd3, 0x4b, 0x55, 0xc7, 0x75, 0xfb, 0xd4, 0x9a,
	0xb8, 0x92, 0xa6, 0xa3, 0xaf, 0x39, 0x5a, 0x9b, 0x0a, 0xe9, 0x9e, 0x51, 0x85, 0x3e, 0x07, 0x57,
	0x6c, 0xb1, 0x08, 0x7c, 0x95, 0xff, 0x83, 0x7f, 0x28, 0xc6, 0xe1, 0x64, 0x8b, 0xc5, 0x57, 0x9b,
	0x52, 0xd6, 0x5c, 0x6d, 0x7f, 0xf0, 0x04, 0xfc, 0x96, 0xa2, 0xc9, 0x79, 0x89, 0xb5, 0x7a, 0xa0,
	0xcf, 0x69, 0xc9, 0x3e, 0x04, 0xef, 0x5a, 0xa4, 0x95, 0x2e, 0xfc, 0xf0, 0xd1, 0xdd, 0x5d, 0xda,
	0xc9, 0x36, 0x29, 0xb8, 0x0e, 0x7e, 0x69, 0x7f, 0x61, 0x85, 0xbf, 0x5b, 0xe0, 0x12, 0x47, 0xcd,
	0x4e, 0x71, 0x29, 0xa2, 0xfa, 0x28, 0xab, 0x36, 0x71, 0x11, 0x58, 0x23, 0x67, 0xec, 0xf0, 0x3d,
	0x8e, 0xbd, 0x03, 0xbd, 0xb9, 0x8e, 0xda, 0x23, 0x67, 0xec, 0x73, 0x83, 0xd8, 0x3d, 0xf0, 0x52,
	0x31, 0xc7, 0xd4, 0xe8, 0x40, 0x03, 0xda, 0x9d, 0x4b, 0x5c, 0x24, 0x5b, 0x23, 0x03, 0x83, 0x88,
	0x2f, 0xaa, 0x05, 0xf1, 0x5a, 0x02, 0x06, 0x51, 0xb9, 0xe6, 0xa2, 0x68, 0x4b, 0x48, 0x6b, 0xca,
	0x5c, 0x44, 0x22, 0x6d, 0x6a, 0xa8, 0x41, 0xf8, 0x87, 0x45, 0xf3, 0xaf, 0xfb, 0xdd, 0x99, 0x39,
	0x5d, 0xd1, 0x77, 0x61, 0x40, 0xb3, 0xf0, 0xe2, 0x5a, 0x48, 0x33, 0x77, 0x7d, 0xc2, 0x57, 0x42,
	0xb2, 0x4f, 0xa1, 0xa7, 0x5e, 0x7e, 0xcb, 0xec, 0x35, 0xe9, 0xae, 0x28, 0xce, 0xcd, 0xb6, 0xb6,
	0x83, 0x6e, 0xa7, 0x83, 0xed, 0x63, 0xbd, 0xee, 0x63, 0x1f, 0x82, 0x47, 0xa3, 0x50, 0xab, 0xdb,
	0xdf, 0x9a, 0x59, 0x0f, 0x8c, 0xde, 0x15, 0x5e, 0xc2, 0x9d, 0xbd, 0x13, 0xdb, 0x93, 0xac, 0xfd,
	0x93, 0x76, 0x5d, 0xf4, 0x4d, 0xd7, 0x48, 0xfb, 0x05, 0xa6, 0x18, 0x95, 0x18, 0xab, 0x7a, 0x0f,
	0x78, 0x8b, 0xc3, 0x9f, 0xad, 0x5d, 0x5e, 0x75, 0x1e, 0xa9, 0x3b, 0xca, 0xd6, 0x6b, 0xb1, 0x89,
	0x4d, 0xea, 0x06, 0x52, 0xdd, 0xe2, 0xb9, 0x49, 0x6d, 0xc7, 0x73, 0xc2, 0x32, 0x37, 0x1d, 0xb4,
	0x65, 0xce, 0x46, 0x30, 0x5c, 0xa3, 0x28, 0x2a, 0x89, 0x6b, 0xdc, 0x94, 0xa6, 0x04, 0x5d, 0x8a,
	0xdd, 0x87, 0x7e, 0x29, 0x96, 0x2f, 0x68, 0xf6, 0x4c, 0x27, 0x4b, 0xb1, 0x3c, 0xc5, 0x9a, 0xbd,
	0x07, 0xfe, 0x22, 0xc1, 0x34, 0x56, 0x21, 0xdd, 0xce, 0x81, 0x22, 0x4e, 0xb1, 0x0e, 0x7f, 0xb1,
	0xa0, 0x37, 0x43, 0x79, 0x8d, 0xf2, 0x8d, 0xec, 0xa2, 0x6b, 0xa7, 0xce, 0xbf, 0xd8, 0xa9, 0x7b,
	0xbb, 0x9d, 0x7a, 0x3b, 0x3b, 0xbd, 0x07, 0xde, 0x4c, 0x46, 0x27, 0x53, 0x75, 0x23, 0x87, 0x6b,
	0x40, 0xd3, 0x38, 0x89, 0xca, 0xe4, 0x1a, 0x8d, 0xc7, 0x1a, 0x14, 0xfe, 0x64, 0x41, 0xef, 0x4c,
	0xd4, 0x59, 0x55, 0xbe, 0x36, 0x61, 0x23, 0x18, 0x4e, 0xf2, 0x3c, 0x4d, 0x22, 0x51, 0x26, 0xd9,
	0xc6, 0xdc, 0xb6, 0x4b, 0xd1, 0x8e, 0xa7, 0x9d, 0xda, 0xe9, 0x7b, 0x77, 0x29, 0x52, 0xe8, 0xb1,
	0x72, 0x41, 0x6d, 0x69, 0x1d, 0x85, 0x6a, 0xf3, 0x53, 0x41, 0x7a, 0xe0, 0xa4, 0x2a, 0xb3, 0x45,
	0x9a, 0xdd, 0xa8, 0x97, 0x0c, 0x78, 0x8b, 0xc3, 0xbf, 0x6c, 0x70, 0xff, 0x2f, 0x77, 0x3b, 0x00,
	0x2b, 0x31, 0x8d, 0xb4, 0x92, 0xd6, 0xeb, 0xfa, 0x1d, 0xaf, 0x0b, 0xa0, 0x5f, 0x4b, 0xb1, 0x59,
	0x62, 0x11, 0x0c, 0x94, 0x73, 0x34, 0x50, 0x45, 0x94, 0x46, 0xb4, 0xc9, 0xf9, 0xbc, 0x81, 0xed,
	0xcc, 0x43, 0x67, 0xe6, 0x3f, 0x31, 0x7e, 0x38, 0x54, 0x37, 0x0a, 0xf6, 0xcb, 0xf2, 0x9f, 0xda,
	0xa0, 0xd7, 0x0a, 0xe6, 0x78, 0x5f, 0x30, 0xc7, 0x3b, 0xc1, 0x4c, 0x8f, 0x1a, 0xc1, 0x4c, 0x8f,
	0x08, 0xf3, 0xf3, 0x46, 0x30, 0xfc, 0x9c, 0x9a, 0xf5, 0x44, 0x66, 0x55, 0x7e, 0x54, 0xeb, 0xae,
	0xfa, 0xbc, 0xc5, 0x34, 0x65, 0xdf, 0xae, 0x50, 0x9a, 0x52, 0xfb, 0xdc, 0x20, 0x9a, 0xc9, 0x33,
	0x65, 0x26, 0xba, 0xb8, 0x1a, 0xb0, 0x8f, 0xc0, 0xe3, 0x54, 0x3c, 0x55, 0xe1, 0xbd, 0xbe, 0x28,
	0x9a, 0xeb, 0x68, 0xf8, 0xd8, 0x6c, 0xa3, 0x2c, 0x97, 0x79, 0x8e, 0xd2, 0x48, 0x49, 0x03, 0x95,
	0x3b, 0xbb, 0x41, 0xed, 0x82, 0x0e, 0xd7, 0x20, 0xfc, 0x0e, 0xfc, 0x49, 0x8a, 0xb2, 0xe4, 0x55,
	0xfa, 0xba, 0x77, 0x32, 0x70, 0xbf, 0x9e, 0x3d, 0x7f, 0xd6, 0x08, 0x90, 0xd6, 0x3b, 0xd9, 0x38,
	0xaf, 0xc8, 0xe6, 0x54, 0xe4, 0xe2, 0x64, 0xaa, 0xe6, 0xc9, 0xe1, 0x06, 0x85, 0x7f, 0x5a, 0xe0,
	0x92, 0x3e, 0x3b, 0xa9, 0x5d, 0x95, 0xba, 0xab, 0x63, 0xfb, 0x15, 0x1d, 0x87, 0x70, 0xf0, 0x5c,
	0x2e, 0xc5, 0x26, 0xf9, 0x41, 0x2b, 0x4a, 0xd7, 0x74, 0x8f, 0x53, 0x5a, 0x97, 0xd9, 0x75, 0x12,
	0xa3, 0x6c, 0xb5, 0x6e, 0x30, 0x5d, 0x66, 0x16, 0xad, 0x70, 0x8d, 0x8d, 0x0f, 0x69, 0xc4, 0xde,
	0x07, 0xff, 0x58, 0xa2, 0x28, 0x31, 0x9e, 0x94, 0x46, 0xf5, 0x3b, 0x82, 0xa2, 0x97, 0x79, 0x6c,
	0xa2, 0x7d, 0x1d, 0x6d, 0x89, 0x79, 0x4f, 0xfd, 0x1a, 0x3e, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x5b, 0x28, 0x43, 0x66, 0x2c, 0x0a, 0x00, 0x00,
}
